import os
import base64
import subprocess

folder_path = f'modules/translation'

file_data = [
    ('translation_module.py', 'aW1wb3J0IG9zCmltcG9ydCBpbwppbXBvcnQgYmFzZTY0CmZyb20gdHlwaW5nIGltcG9ydCBVbmlvbiwgT3B0aW9uYWwKZnJvbSBmYXN0YXBpIGltcG9ydCBIVFRQRXhjZXB0aW9uCmZyb20gZG90ZW52IGltcG9ydCBsb2FkX2RvdGVudgpmcm9tIGxvZ3VydSBpbXBvcnQgbG9nZ2VyCgpmcm9tIC5kYXRhX21vZGVscyBpbXBvcnQgVHJhbnNsYXRpb25SZXF1ZXN0LCBNaW5lckNvbmZpZywgTW9kdWxlQ29uZmlnLCBCYXNlTWluZXIsIFRyYW5zbGF0aW9uQ29uZmlnCmZyb20gLnRyYW5zbGF0aW9uIGltcG9ydCBUcmFuc2xhdGlvbgoKbG9hZF9kb3RlbnYoKQoKCm1vZHVsZV9zZXR0aW5ncyA9IE1vZHVsZUNvbmZpZygKICAgIG1vZHVsZV9wYXRoPSJtb2R1bGUvdHJhbnNsYXRpb24iLAogICAgbW9kdWxlX25hbWU9InRyYW5zbGF0aW9uIiwKICAgIG1vZHVsZV9lbmRwb2ludD0iL21vZHVsZXMvdHJhbnNsYXRpb24iLAogICAgbW9kdWxlX3VybD0iaHR0cHM6Ly90cmFuc2xhdGlvbi5jb20vIgopCgptaW5lcl9zZXR0aW5ncyA9IE1pbmVyQ29uZmlnKAogICAgbW9kdWxlX25hbWU9InRyYW5zbGF0aW9uIiwKICAgIG1vZHVsZV9wYXRoPSJtb2R1bGVzL3RyYW5zbGF0aW9uIiwKICAgIG1vZHVsZV9lbmRwb2ludD0iL21vZHVsZXMvdHJhbnNsYXRpb24iLAogICAgbW9kdWxlX3VybD0iaHR0cHM6Ly90cmFuc2xhdGlvbi5jb20vIiwKICAgIG1pbmVyX2tleV9kaWN0PXsKICAgICAgICAidGVzdF9taW5lcl8xIjogewogICAgICAgICAgICAia2V5IjogIjVHTjJkTGhXYTVzQ0I0QTU1OEJra2g5NkJOZHd3aWtQeENCSlc2SFFYbVFmN3lwUiIsCiAgICAgICAgICAgICJuYW1lIjogInRlc3RfbWluZXJfMSIsCiAgICAgICAgICAgICJob3N0IjogIjAuMC4wLjAiLAogICAgICAgICAgICAicG9ydCI6IDQyNjksCiAgICAgICAgICAgICJrZXlwYXRoIjogIiRIT01FLy5jb21tdW5lL2tleS90ZXN0X21pbmVyXzEuanNvbiIKICAgICAgICB9CiAgICB9LAopCnRyYW5zbGF0b3IgPSBUcmFuc2xhdGlvbihUcmFuc2xhdGlvbkNvbmZpZygpKQoKCmNsYXNzIFRyYW5zbGF0aW9uTWluZXIoQmFzZU1pbmVyKToKICAgIAogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsIAogICAgICAgIHJvdXRlOiBPcHRpb25hbFtzdHJdID0gInRyYW5zbGF0aW9uIiwKICAgICAgICBpbnBhdGg6IE9wdGlvbmFsW3N0cl0gPSAibW9kdWxlcy90cmFuc2xhdGlvbi9pbiIsCiAgICAgICAgb3V0cGF0aDogT3B0aW9uYWxbc3RyXSA9ICJtb2R1bGVzL3RyYW5zbGF0aW9uL291dCIsCiAgICApOgogICAgICAgICIiIgogICAgICAgIEluaXRpYWxpemVzIHRoZSBUcmFuc2xhdGlvbk1pbmVyIGNsYXNzIHdpdGggb3B0aW9uYWwgcm91dGUsIGlucGF0aCwgYW5kIG91dHBhdGggcGFyYW1ldGVycy4KICAgICAgICAKICAgICAgICBQYXJhbWV0ZXJzOgogICAgICAgICAgICByb3V0ZSAoT3B0aW9uYWxbc3RyXSk6IFRoZSByb3V0ZSBmb3IgdGhlIHRyYW5zbGF0aW9uLgogICAgICAgICAgICBpbnBhdGggKE9wdGlvbmFsW3N0cl0pOiBUaGUgaW5wdXQgcGF0aCBmb3IgdHJhbnNsYXRpb24uCiAgICAgICAgICAgIG91dHBhdGggKE9wdGlvbmFsW3N0cl0pOiBUaGUgb3V0cHV0IHBhdGggZm9yIHRyYW5zbGF0aW9uLgogICAgICAgICIiIgogICAgICAgIHN1cGVyKCkuX19pbml0X18obWluZXJfc2V0dGluZ3MsIG1vZHVsZV9zZXR0aW5ncykKICAgICAgICBzZWxmLmFkZF9yb3V0ZShyb3V0ZSkKICAgICAgICAKICAgICAgICBvcy5tYWtlZGlycyhpbnBhdGgsIGV4aXN0X29rPVRydWUpCiAgICAgICAgb3MubWFrZWRpcnMob3V0cGF0aCwgZXhpc3Rfb2s9VHJ1ZSkKICAgIAogICAgZGVmIHByb2Nlc3Moc2VsZiwgbWluZXJfcmVxdWVzdDogVHJhbnNsYXRpb25SZXF1ZXN0KSAtPiBVbmlvbltzdHIsIGJ5dGVzXToKICAgICAgICAiIiIKICAgICAgICBQcm9jZXNzZXMgdGhlIGdpdmVuIGBUcmFuc2xhdGlvblJlcXVlc3RgIG9iamVjdCBhbmQgcmV0dXJucyB0aGUgdHJhbnNsYXRpb24gcmVzdWx0LgoKICAgICAgICBQYXJhbWV0ZXJzOgogICAgICAgICAgICBtaW5lcl9yZXF1ZXN0IChUcmFuc2xhdGlvblJlcXVlc3QpOiBUaGUgcmVxdWVzdCBvYmplY3QgY29udGFpbmluZyB0aGUgaW5wdXQgZGF0YSwgdGFzayBzdHJpbmcsIHNvdXJjZSBsYW5ndWFnZSwgYW5kIHRhcmdldCBsYW5ndWFnZS4KCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgVW5pb25bc3RyLCBieXRlc106IFRoZSB0cmFuc2xhdGlvbiByZXN1bHQuCgogICAgICAgIFJhaXNlczoKICAgICAgICAgICAgSFRUUEV4Y2VwdGlvbjogSWYgYW4gZXJyb3Igb2NjdXJzIGR1cmluZyB0aGUgdHJhbnNsYXRpb24gcHJvY2Vzcy4KCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gdHJhbnNsYXRvci5wcm9jZXNzKG1pbmVyX3JlcXVlc3QpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJFcnJvciBwcm9jZXNzaW5nIHRyYW5zbGF0aW9uOiB7ZX0iKQogICAgICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWYiRXJyb3IgcHJvY2Vzc2luZyB0cmFuc2xhdGlvbjoge2V9IikgZnJvbSBlCiAgICAKICAgICAgICAKbWluZXIgPSBUcmFuc2xhdGlvbk1pbmVyKCkKCm1pbmVyLmFkZF9yb3V0ZSgidHJhbnNsYXRpb24iKQoKbWluZXIucnVuX3NlcnZlcigiMC4wLjAuMCIsIDQyNjkpCg=='),
    ('translation.py', ''),
    ('__init__.py', ''),
    ('data_models.py', ''),
    ('install_translation.sh', 'IyEvYmluL2Jhc2gKCnNldCAtZQoKc291cmNlIC4vLnZlbnYvYmluL2FjdGl2YXRlCgpweXRob24gLW0gcGlwIGluc3RhbGwgLS11cGdyYWRlIHBpcAoKcGlwIGluc3RhbGwgc2V0dXB0b29scyB3aGVlbCBnbnVyZWFkbGluZQpwaXAgaW5zdGFsbCBzbmRmaWxlIGdnbWwtcHl0aG9uIHN1YnN0cmF0ZS1pbnRlcmZhY2UgYml0dGVuc29yIGxvZ3VydQpwaXAgaW5zdGFsbCBmYXN0YXBpIHV2aWNvcm4gbG9ndXJ1IHJlcXVlc3RzIHN1YnN0cmF0ZS1pbnRlcmZhY2UKCnN1ZG8gYXB0LWdldCB1cGRhdGUgJiYgc3VkbyBhcHQtZ2V0IHVwZ3JhZGUgLXkKc3VkbyBhcHQtZ2V0IGluc3RhbGwgcHl0aG9uMyBweXRob24zLWRldiBweXRob24zLXZlbnYgcHl0aG9uMy1waXAgcHl0aG9uLWlzLXB5dGhvbjMgbGlic25kZmlsZTEtZGV2IGxpYmdtcDEwLWRldiAteQoKaWYgWyAhIC1kICIuL21vZHVsZXMvdHJhbnNsYXRpb24vc2VhbWxlc3MiIF07IHRoZW4KICAgIGdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tyZXNlYXJjaC9zZWFtbGVzc19jb21tdW5pY2F0aW9uLmdpdCAuL21vZHVsZXMvdHJhbnNsYXRpb24vc2VhbWxlc3MKICAgIApmaQpwaXAgaW5zdGFsbCAuL21vZHVsZXMvdHJhbnNsYXRpb24vc2VhbWxlc3MKcGlwIGluc3RhbGwgZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS9odWdnaW5nZmFjZS90cmFuc2Zvcm1lcnMgdG9yY2ggdG9yY2hhdWRpbyB0b3JjaHZpc2lvbiBmYWlyc2VxMgoKbWtkaXIgLXAgLi9tb2R1bGVzL3RyYW5zbGF0aW9uL2luCgpta2RpciAtcCAuL21vZHVsZXMvdHJhbnNsYXRpb24vb3V0Cg=='),
]

for relative_path, encoded_content in file_data:
    full_path = os.path.join(folder_path, relative_path)
    os.makedirs(os.path.dirname(full_path), exist_ok=True)
    with open(full_path, 'wb') as f:
        f.write(base64.b64decode(encoded_content))
    print(f'Created: {full_path}')
command = ['bash', 'modules/translation/install_translation.sh']
subprocess.run(command, check=True)
