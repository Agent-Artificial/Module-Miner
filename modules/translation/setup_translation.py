import os
import base64
import subprocess

folder_path = f'modules/translation'

file_data = [
    ('data_models.py', 'aW1wb3J0IHRvcmNoCmZyb20gcHlkYW50aWMgaW1wb3J0IEJhc2VNb2RlbApmcm9tIHR5cGluZyBpbXBvcnQgVW5pb24sIE9wdGlvbmFsLCBBbnkKCmZyb20gZGF0YV9tb2RlbHMgaW1wb3J0IEJhc2VNaW5lciwgQmFzZU1vZHVsZSwgTW9kdWxlQ29uZmlnLCBNaW5lclJlcXVlc3QsIGFwcCwgTWluZXJDb25maWcsIFNzNThLZXkKCgpUQVNLX1NUUklOR1MgPSB7CiAgICAic3BlZWNoMnRleHQiOiAiczJ0dCIsCiAgICAic3BlZWNoMnNwZWVjaCI6ICJzMnN0IiwKICAgICJhdXRvX3NwZWVjaF9yZWNvZ25pdGlvbiI6ICJhc3IiLAogICAgInRleHQyc3BlZWNoIjogInQyc3QiLAogICAgInRleHQydGV4dCI6ICJ0MnR0IiwKfQoKVEFSR0VUX0xBTkdVQUdFUyA9IHsKICAgICJFbmdsaXNoIjogImVuZyIsCiAgICAiQWZyaWthYW5zIjogImFmciIsCiAgICAiQW1oYXJpYyI6ICJhbWgiLAogICAgIk1vZGVybiBTdGFuZGFyZCBBcmFiaWMiOiAiYXJiIiwKICAgICJNb3JvY2NhbiBBcmFiaWMiOiAiYXJ5IiwKICAgICJFZ3lwdGlhbiBBcmFiaWMiOiAiYXJ6IiwKICAgICJBc3NhbWVzZSI6ICJhc20iLAogICAgIkFzdHVyaWFuIjogImFzdCIsCiAgICAiTm9ydGggQXplcmJhaWphbmkiOiAiYXpqIiwKICAgICJCZWxhcnVzaWFuIjogImJlbCIsCiAgICAiQmVuZ2FsaSI6ICJiZW4iLAogICAgIkJvc25pYW4iOiAiYm9zIiwKICAgICJCdWxnYXJpYW4iOiAiYnVsIiwKICAgICJDYXRhbGFuIjogImNhdCIsCiAgICAiQ2VidWFubyI6ICJjZWIiLAogICAgIkN6ZWNoIjogImNlcyIsCiAgICAiQ2VudHJhbCI6ICJja2IiLAogICAgIk1hbmRhcmluIENoaW5lc2UiOiAiY21uIiwKICAgICJNYW5kYXJpbiBDaGluZXNlIEhhbnQiOiAiY21uX0hhbnQiLAogICAgIldlbHNoIjogImN5bSIsCiAgICAiRGFuaXNoIjogImRhbiIsCiAgICAiR2VybWFuIjogImRldSIsCiAgICAiRXN0b25pYW4iOiAiZXN0IiwKICAgICJCYXNxdWUiOiAiZXVzIiwKICAgICJGaW5uaXNoIjogImZpbiIsCiAgICAiRnJlbmNoIjogImZyYSIsCiAgICAiTmlnZXJpYW4gRnVsZnVsZGUiOiAiZnV2IiwKICAgICJXZXN0IENlbnRyYWwgT3JvbW8iOiAiZ2F6IiwKICAgICJJcmlzaCI6ICJnbGUiLAogICAgIkdhbGljaWFuIjogImdsZyIsCiAgICAiR3VqYXJhdGkiOiAiZ3VqIiwKICAgICJIZWJyZXciOiAiaGViIiwKICAgICJIaW5kaSI6ICJoaW4iLAogICAgIkNyb2F0aWFuIjogImhydiIsCiAgICAiSHVuZ2FyaWFuIjogImh1biIsCiAgICAiQXJtZW5pYW4iOiAiaHllIiwKICAgICJJZ2JvIjogImlibyIsCiAgICAiSW5kb25lc2lhbiI6ICJpbmQiLAogICAgIkljZWxhbmRpYyI6ICJpc2wiLAogICAgIkl0YWxpYW4iOiAiaXRhIiwKICAgICJKYXZhbmVzZSI6ICJqYXYiLAogICAgIkphcGFuZXNlIjogImpwbiIsCiAgICAiS2FtYmEiOiAia2FtIiwKICAgICJLYW5uYWRhIjogImthbiIsCiAgICAiR2VvcmdpYW4iOiAia2F0IiwKICAgICJLYXpha2giOiAia2F6IiwKICAgICJLYWJ1dmVyZGlhbnUiOiAia2VhIiwKICAgICJIYWxoIE1vbmdvbGlhbiI6ICJraGsiLAogICAgIktobWVyIjogImtobSIsCiAgICAiS3lyZ3l6IjogImtpciIsCiAgICAiS29yZWFuIjogImtvciIsCiAgICAiTGFvIjogImxhbyIsCiAgICAiTGl0aHVhbmlhbiI6ICJsaXQiLAogICAgIkx1eGVtYm91cmdpc2giOiAibHR6IiwKICAgICJHYW5kYSI6ICJsdWciLAogICAgIkx1byI6ICJsdW8iLAogICAgIlN0YW5kYXJkIExhdHZpYW4iOiAibHZzIiwKICAgICJNYWl0aGlsaSI6ICJtYWkiLAogICAgIk1hbGF5YWxhbSI6ICJtYWwiLAogICAgIk1hcmF0aGkiOiAibWFyIiwKICAgICJNYWNlZG9uaWFuIjogIm1rZCIsCiAgICAiTWFsdGVzZSI6ICJtbHQiLAogICAgIk1laXRlaSI6ICJtbmkiLAogICAgIkJ1cm1lc2UiOiAibXlhIiwKICAgICJEdXRjaCI6ICJubGQiLAogICAgIk5vcndlZ2lhbiBOeW5vcnNrIjogIm5ubyIsCiAgICAiTm9yd2VnaWFuIEJva23DpWwiOiAibm9iIiwKICAgICJOZXBhbGkiOiAibnBpIiwKICAgICJOeWFuamEiOiAibnlhIiwKICAgICJPY2NpdGFuIjogIm9jaSIsCiAgICAiT2RpYSI6ICJvcnkiLAogICAgIlB1bmphYmkiOiAicGFuIiwKICAgICJTb3V0aGVybiBQYXNodG8iOiAicGJ0IiwKICAgICJXZXN0ZXJuIFBlcnNpYW4iOiAicGVzIiwKICAgICJQb2xpc2giOiAicG9sIiwKICAgICJQb3J0dWd1ZXNlIjogInBvciIsCiAgICAiUm9tYW5pYW4iOiAicm9uIiwKICAgICJSdXNzaWFuIjogInJ1cyIsCiAgICAiU2xvdmFrIjogInNsayIsCiAgICAiU2xvdmVuaWFuIjogInNsdiIsCiAgICAiU2hvbmEiOiAic25hIiwKICAgICJTaW5kaGkiOiAic25kIiwKICAgICJTb21hbGkiOiAic29tIiwKICAgICJTcGFuaXNoIjogInNwYSIsCiAgICAiU2VyYmlhbiI6ICJzcnAiLAogICAgIlN3ZWRpc2giOiAic3dlIiwKICAgICJTd2FoaWxpIjogInN3aCIsCiAgICAiVGFtaWwiOiAidGFtIiwKICAgICJUZWx1Z3UiOiAidGVsIiwKICAgICJUYWppayI6ICJ0Z2siLAogICAgIlRhZ2Fsb2ciOiAidGdsIiwKICAgICJUaGFpIjogInRoYSIsCiAgICAiVHVya2lzaCI6ICJ0dXIiLAogICAgIlVrcmFpbmlhbiI6ICJ1a3IiLAogICAgIlVyZHUiOiAidXJkIiwKICAgICJOb3J0aGVybiBVemJlayI6ICJ1em4iLAogICAgIlZpZXRuYW1lc2UiOiAidmllIiwKICAgICJYaG9zYSI6ICJ4aG8iLAogICAgIllvcnViYSI6ICJ5b3IiLAogICAgIkNhbnRvbmVzZSI6ICJ5dWUiLAogICAgIkNvbGxvcXVpYWwgTWFsYXkiOiAiemxtIiwKICAgICJTdGFuZGFyZCBNYWxheSI6ICJ6c20iLAogICAgIlp1bHUiOiAienVsIiwKfQoKCmNsYXNzIFRyYW5zbGF0aW9uQ29uZmlnKEJhc2VNb2RlbCk6CiAgICBtb2RlbF9uYW1lX29yX2NhcmQ6IFVuaW9uW3N0ciwgQW55XSA9ICJmYWNlYm9vay9zZWFtbGVzcy1NNFQtVjItbGFyZ2UiCiAgICB2b2NvZGVyX25hbWU6IHN0ciA9ICgKICAgICAgICAidm9jb2Rlcl92MiIKICAgICAgICBpZiBtb2RlbF9uYW1lX29yX2NhcmQgPT0gImZhY2Vib29rL3NlYW1sZXNzLU00VC1WMi1sYXJnZSIKICAgICAgICBlbHNlICJ2b2NvZGVyXzM2bGFuZ3MiCiAgICApCiAgICBkZXZpY2U6IEFueSA9IHRvcmNoLmRldmljZShkZXZpY2U9ImN1ZGE6MCIpCiAgICB0ZXh0X3Rva2VuaXplcjogc3RyID0gbW9kZWxfbmFtZV9vcl9jYXJkCiAgICBhcHBseV9taW50b3g6IGJvb2wgPSAoVHJ1ZSwpCiAgICBkdHlwZTogQW55ID0gKHRvcmNoLmZsb2F0MTYsKQogICAgaW5wdXRfbW9kYWxpdHk6IE9wdGlvbmFsW0FueV0gPSAoTm9uZSwpCiAgICBvdXRwdXRfbW9kYWxpdHk6IE9wdGlvbmFsW0FueV0gPSBOb25lCgoKY2xhc3MgVHJhbnNsYXRpb25EYXRhKEJhc2VNb2RlbCk6CiAgICBpbnB1dDogc3RyCiAgICB0YXNrX3N0cmluZzogc3RyCiAgICBzb3VyY2VfbGFuZ3VhZ2U6IE9wdGlvbmFsW3N0cl0gPSBOb25lCiAgICB0YXJnZXRfbGFuZ3VhZ2U6IHN0cgogICAgCiAgICAKY2xhc3MgVHJhbnNsYXRpb25SZXF1ZXN0KE1pbmVyUmVxdWVzdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGF0YTogVHJhbnNsYXRpb25EYXRhKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKICAgICAgICBzZWxmLmRhdGEgPSBkYXRhCgogICAKX19hbGxfXyA9IFsKICAgICJUcmFuc2xhdGlvbkNvbmZpZyIsCiAgICAiVHJhbnNsYXRpb25EYXRhIiwKICAgICJUcmFuc2xhdGlvblJlcXVlc3QiLAogICAgIlRBUkdFVF9MQU5HVUFHRVMiLAogICAgIlRBU0tfU1RSSU5HUyIsCiAgICAiTWluZXJDb25maWciLAogICAgIk1vZHVsZUNvbmZpZyIsCiAgICAiQmFzZU1pbmVyIiwKICAgICJCYXNlTW9kdWxlIiwKICAgICJhcHAiLAogICAgIlNzNThLZXkiCl0='),
    ('__init__.py', ''),
    ('translation_module.py', 'aW1wb3J0IG9zCmZyb20gdHlwaW5nIGltcG9ydCBVbmlvbgpmcm9tIGZhc3RhcGkgaW1wb3J0IEhUVFBFeGNlcHRpb24KZnJvbSBkb3RlbnYgaW1wb3J0IGxvYWRfZG90ZW52CmZyb20gbG9ndXJ1IGltcG9ydCBsb2dnZXIKCmZyb20gLmRhdGFfbW9kZWxzIGltcG9ydCBUcmFuc2xhdGlvblJlcXVlc3QsIE1pbmVyQ29uZmlnLCBNb2R1bGVDb25maWcsIEJhc2VNaW5lciwgVHJhbnNsYXRpb25Db25maWcsIGFwcApmcm9tIC50cmFuc2xhdGlvbiBpbXBvcnQgVHJhbnNsYXRpb24KCmxvYWRfZG90ZW52KCkKCgptb2R1bGVfc2V0dGluZ3MgPSBNb2R1bGVDb25maWcoCiAgICBtb2R1bGVfcGF0aD1vcy5nZXRlbnYoIk1PRFVMRV9QQVRIIiksCiAgICBtb2R1bGVfbmFtZT1vcy5nZXRlbnYoIk1PRFVMRV9OQU1FIiksCiAgICBtb2R1bGVfZW5kcG9pbnQ9b3MuZ2V0ZW52KCJNT0RVTEVfRU5EUE9JTlQiKSwKICAgIG1vZHVsZV91cmw9b3MuZ2V0ZW52KCJNT0RVTEVfVVJMIiksCikKCm1pbmVyX3NldHRpbmdzID0gTWluZXJDb25maWcoCiAgICBtaW5lcl9uYW1lPW9zLmdldGVudigiTUlORVJfTkFNRSIpLAogICAgbWluZXJfa2V5cGF0aD1vcy5nZXRlbnYoIktFWVBBVEhfTkFNRSIpLAogICAgbWluZXJfaG9zdD1vcy5nZXRlbnYoIk1JTkVSX0hPU1QiKSwKICAgIGV4dGVybmFsX2FkZHJlc3M9b3MuZ2V0ZW52KCJFWFRFUk5BTF9BRERSRVNTIiksCiAgICBtaW5lcl9wb3J0PW9zLmdldGVudigiTUlORVJfUE9SVCIpLAogICAgc3Rha2U9b3MuZ2V0ZW52KCJTVEFLRSIpLAogICAgbmV0dWlkPW9zLmdldGVudigiTkVUVUlEIiksCiAgICBmdW5kaW5nX2tleT1vcy5nZXRlbnYoIkZVTkRJTkdfS0VZIiksCiAgICBmdW5kaW5nX21vZGlmaWVyPW9zLmdldGVudigiTU9ESUZJRVIiKSwKICAgIG1vZHVsZV9uYW1lPW9zLmdldGVudigiTU9EVUxFX05BTUUiKQopCnRyYW5zbGF0b3IgPSBUcmFuc2xhdGlvbihUcmFuc2xhdGlvbkNvbmZpZygpKQoKCmNsYXNzIFRyYW5zbGF0aW9uTWluZXIoQmFzZU1pbmVyKToKICAgIAogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsCiAgICAgICAgbWluZXJfY29uZmlnOiBNaW5lckNvbmZpZywKICAgICAgICBtb2R1bGVfY29uZmlnOiBNb2R1bGVDb25maWcKICAgICk6CiAgICAgICAgIiIiCiAgICAgICAgSW5pdGlhbGl6ZXMgdGhlIFRyYW5zbGF0aW9uTWluZXIgY2xhc3Mgd2l0aCBvcHRpb25hbCByb3V0ZSwgaW5wYXRoLCBhbmQgb3V0cGF0aCBwYXJhbWV0ZXJzLgogICAgICAgIAogICAgICAgIFBhcmFtZXRlcnM6CiAgICAgICAgICAgIG1pbmVyX2NvbmZpZyAoTWluZXJDb25maWcpOiBUaGUgcm91dGUgZm9yIHRoZSB0cmFuc2xhdGlvbi4KICAgICAgICAgICAgbW9kdWxlX2NvbmZpZyAoTW9kdWxlQ29uZmlnKTogVGhlIGlucHV0IHBhdGggZm9yIHRyYW5zbGF0aW9uLgogICAgICAgICIiIgogICAgICAgIHN1cGVyKCkuX19pbml0X18obWluZXJfY29uZmlnLCBtb2R1bGVfc2V0dGluZ3MpICAgICAgICAKICAgICAgICBvcy5tYWtlZGlycyhtb2R1bGVfY29uZmlnLm1vZHVsZV9wYXRoLCBleGlzdF9vaz1UcnVlKQogICAgICAgIG9zLm1ha2VkaXJzKGYie21vZHVsZV9jb25maWcubW9kdWxlX3BhdGh9L2luIiwgZXhpc3Rfb2s9VHJ1ZSkKICAgICAgICBvcy5tYWtlZGlycyhmInttb2R1bGVfY29uZmlnLm1vZHVsZV9wYXRofS9vdXQiLCBleGlzdF9vaz1UcnVlKQogICAgCiAgICBkZWYgcHJvY2VzcyhzZWxmLCBtaW5lcl9yZXF1ZXN0OiBUcmFuc2xhdGlvblJlcXVlc3QpIC0+IFVuaW9uW3N0ciwgYnl0ZXNdOgogICAgICAgICIiIgogICAgICAgIFByb2Nlc3NlcyB0aGUgZ2l2ZW4gYFRyYW5zbGF0aW9uUmVxdWVzdGAgb2JqZWN0IGFuZCByZXR1cm5zIHRoZSB0cmFuc2xhdGlvbiByZXN1bHQuCgogICAgICAgIFBhcmFtZXRlcnM6CiAgICAgICAgICAgIG1pbmVyX3JlcXVlc3QgKFRyYW5zbGF0aW9uUmVxdWVzdCk6IFRoZSByZXF1ZXN0IG9iamVjdCBjb250YWluaW5nIHRoZSBpbnB1dCBkYXRhLCB0YXNrIHN0cmluZywgc291cmNlIGxhbmd1YWdlLCBhbmQgdGFyZ2V0IGxhbmd1YWdlLgoKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBVbmlvbltzdHIsIGJ5dGVzXTogVGhlIHRyYW5zbGF0aW9uIHJlc3VsdC4KCiAgICAgICAgUmFpc2VzOgogICAgICAgICAgICBIVFRQRXhjZXB0aW9uOiBJZiBhbiBlcnJvciBvY2N1cnMgZHVyaW5nIHRoZSB0cmFuc2xhdGlvbiBwcm9jZXNzLgoKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJldHVybiB0cmFuc2xhdG9yLnByb2Nlc3MobWluZXJfcmVxdWVzdCkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkVycm9yIHByb2Nlc3NpbmcgdHJhbnNsYXRpb246IHtlfSIpCiAgICAgICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZiJFcnJvciBwcm9jZXNzaW5nIHRyYW5zbGF0aW9uOiB7ZX0iKSBmcm9tIGUKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtaW5lciA9IFRyYW5zbGF0aW9uTWluZXIobW9kdWxlX2NvbmZpZz1tb2R1bGVfc2V0dGluZ3MsIG1pbmVyX2NvbmZpZz1taW5lcl9zZXR0aW5ncykKCiAgICBtaW5lci5hZGRfcm91dGUobWluZXIsIGFwcCkK'),
    ('translation.py', ''),
    ('install_translation.sh', 'IyEvYmluL2Jhc2gKCnNldCAtZQoKc291cmNlIC4vLnZlbnYvYmluL2FjdGl2YXRlCgpweXRob24gLW0gcGlwIGluc3RhbGwgLS11cGdyYWRlIHBpcAoKcGlwIGluc3RhbGwgc2V0dXB0b29scyB3aGVlbCBnbnVyZWFkbGluZQpwaXAgaW5zdGFsbCBzbmRmaWxlIGdnbWwtcHl0aG9uIHN1YnN0cmF0ZS1pbnRlcmZhY2UgYml0dGVuc29yIGxvZ3VydQpwaXAgaW5zdGFsbCBmYXN0YXBpIHV2aWNvcm4gbG9ndXJ1IHJlcXVlc3RzIHN1YnN0cmF0ZS1pbnRlcmZhY2UKCmlmIGNvbW1hbmQgLXYgYXB0LWdldCA+L2Rldi9udWxsOyB0aGVuCiAgICBzdWRvIGFwdC1nZXQgdXBkYXRlICYmIHN1ZG8gYXB0LWdldCB1cGdyYWRlIC15CiAgICBzdWRvIGFwdC1nZXQgaW5zdGFsbCBweXRob24zIHB5dGhvbjMtZGV2IHB5dGhvbjMtdmVudiBweXRob24zLXBpcCBweXRob24taXMtcHl0aG9uMyBsaWJzbmRmaWxlMS1kZXYgbGliZ21wMTAtZGV2IC15CmVsaWYgY29tbWFuZCAtdiBwYWNtYW4gPi9kZXYvbnVsbDsgdGhlbgogICAgc3VkbyBwYWNtYW4gLVN5dSAtLW5vY29uZmlybQogICAgc3VkbyBwYWNtYW4gLVMgcHl0aG9uIHB5dGhvbi1waXAgcHl0aG9uLXZpcnR1YWxlbnYgbGlic25kZmlsZSBnbXAgLS1ub2NvbmZpcm0KZWxzZQogICAgZWNobyAiVGhpcyBzY3JpcHQgcmVxdWlyZXMgYSBMaW51eCBkaXN0cmlidXRpb24gd2l0aCBlaXRoZXIgYXB0IG9yIHBhY21hbi4iCiAgICBleGl0IDEKZmkKCmlmIFsgISAtZCAiLi9tb2R1bGVzL3RyYW5zbGF0aW9uL3NlYW1sZXNzIiBdOyB0aGVuCiAgICBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rcmVzZWFyY2gvc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5naXQgLi9tb2R1bGVzL3RyYW5zbGF0aW9uL3NlYW1sZXNzCiAgICAKZmkKcGlwIGluc3RhbGwgLi9tb2R1bGVzL3RyYW5zbGF0aW9uL3NlYW1sZXNzCnBpcCBpbnN0YWxsIGdpdCtodHRwczovL2dpdGh1Yi5jb20vaHVnZ2luZ2ZhY2UvdHJhbnNmb3JtZXJzIHRvcmNoIHRvcmNoYXVkaW8gdG9yY2h2aXNpb24gZmFpcnNlcTIKCm1rZGlyIC1wIC4vbW9kdWxlcy90cmFuc2xhdGlvbi9pbgoKbWtkaXIgLXAgLi9tb2R1bGVzL3RyYW5zbGF0aW9uL291dAo='),
]

for relative_path, encoded_content in file_data:
    full_path = os.path.join(folder_path, relative_path)
    os.makedirs(os.path.dirname(full_path), exist_ok=True)
    with open(full_path, 'wb') as f:
        f.write(base64.b64decode(encoded_content))
    print(f'Created: {full_path}')
command = ['bash', 'modules/translation/install_translation.sh']
subprocess.run(command, check=True)
